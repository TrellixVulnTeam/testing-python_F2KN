------------------------------------------------------------
| CHAPTER 3 - PYTEST FIXTURES                              |
------------------------------------------------------------

- Pytest Fixtures

    - Fixtures run before and after test functions.  

        import pytest
    
        @pytest.fixture()
        def some_data():
            return 42
    
        def test_some_data(some_data):
            assert some_data == 42

 
    - Pytest looks for the fixture name ('some_data' passed in as a parameter) in 
        the current module, and if it doesn't find it, will also try to look in 
        'conftest.py'.

      For our project, we'll put all of our fixtures in 'conftest.py' so that we 
        can share them across multiple test files.  Since conftest is implemented 
        as a pytest plugin, it does not need to be directly imported in our files.



- Using Fixtures for Setup and Teardown

    - Most of our tests assume that the Tasks database is already set up and 
        running.  We take care of this with the 'start_tasks_db' and 
        'stop_tasks_db' tasks.


    - The 'tmpdir' fixture gives us a temporary directory for testing that will
        automatically be cleaned up afterwards.


    - A fixture function runs before the tests that use it.  However, if there is
        a 'yield' in the function, it stops there, passes control to the tests,
        and picks up after all the tests are done.

      We'll add the fixture to set up and tear down the test db.

        # tasks_proj/tests/conftest.py
        --------------------------------------
        import pytest
        import tasks
        from tasks import Task

        @pytest.fixture()
        def tasks_db(tmpdir):
            tasks.start_tasks_db(str(tmpdir), 'tiny')
            yield
            tasks.stop_tasks_db()


    - Now, we'll change one of our tests to include the test db.

        # tasks_proj/tests/func/test_add.py
        ------------------------------------------------
        import pytest
        import tasks
        from tasks import Task

        def test_add_returns_valid_id(tasks_db):
            # GIVEN an initialized tasks db
            new_task = Task('do something')

            # WHEN a new task is added
            task_id = tasks.add(new_task)

            # THEN returned task_id is of type int
            assert isinstance(task_id, int)



- Tracing Execution with -setup-show

    - During development, it can be useful to output information about the
        fixtures that are run.  The '--setup-show' option is used for this.

        $ pytest --setup-show -v test_add.py



- Using Fixtures for Test Data

    - Fixtures are a good place to set up test data.  You can return anything.

        @pytest.fixture()
        def a_tuple():
            return (1, 'foo', None, {'bar': 23})

        def test_a_tuple(a_tuple):
            assert a_tuple[3]['bar'] == 23


    - Here are some tasks we will use as test data.

        # tasks_proj/tests/conftest.py
        ------------------------------------------
        # Reminder of Task constructor interface
        # Task(summary=None, owner=None, done=False, id=None)
        # summary is required
        # owner and done are optional
        # id is set by database

        @pytest.fixture()
        def tasks_just_a_few():
            return (
                Task('Write some code', 'Brian', True),
                Task('Code review Brian's code', 'Katie', False),
                Task('Fix what Brian did', 'Michelle', False))

        @pytest.fixture()
        def tasks_mult_per_owner():
            return (
                Task('Make a cookie', 'Raphael'),
                Task('Use an emoji', 'Raphael'),
                Task('Move to Berlin', 'Raphael'),

                Task('Create', 'Michelle'),
                Task('Inspire', 'Michelle'),
                Task('Encourage', 'Michelle'),

                Task('Do a handstand', 'Daniel'),
                Task('Write some books', 'Daniel'),
                Task('Eat ice cream', 'Daniel'))



- Using Multiple Fixtures

    - We can create fixtures that use other fixtures.

        # conftest.py
        ------------------------------------------
        @pytest.fixture()
        def db_with_3_tasks(tasks_db, tasks_just_a_few):
            """Connected db with 3 tasks, all unique."""
            for t in tasks_just_a_few:
                tasks.add(t)

        @pytest.fixture()
        def db_with_multi_per_owner(tasks_db, tasks_mult_per_owner):
            """Connected db with 9 tasks, 3 owners, all with 3 tasks."""
            for t in tasks_mult_per_owner:
                tasks.add(t)


    - Then we can use the fixture:

        def test_add_increases_count(db_with_3_tasks):
            tasks.add(Task('throw a party'))
            assert tasks.count() == 4



- Specifying Fixture Scope

    - Fixtures can include the optional 'scope' parameter, which controls how often
        a fixture gets set up and torn down.

        scope='function'    # Runs once per test function (this is the default)
        scope='class'       # Runs once per test class
        scope='module'      # Runs once per module
        scope='session'     # Runs once per session


    - For example:

        @pytest.fixture(scope='function')
        def func_scope():
            """ Function scope fixture """

        @pytest.fixture(scope='module')
        def mod_scope():
            """ Module scope fixture """

        @pytest.fixture(scope='session')
        def sess_scope():
            """ Session scope fixture """

        @pytest.fixture(scope='class')
        def class_scope():
            """ Class scope fixture """


        def test1(sess_scope, mod_scope, func_scope):
            """ Use the session, module, and function scope fixtures. """


        @pytest.mark.usefixtures('class_scope')
        class TestSomething:

            def test2(self):
                """ Test using class scope fixture. """


    - Fixtures can only depend on other fixtures in their same scope or a wider scope.
        So, a function scope fixture can also depend on class, module, or session scope
        fixtures.  But you can't go in reverse order.



- Changing Scope for Tasks Project Fixtures

    - So far, we've been setting up a temporary directory and new connection to
        a database for each test.  Instead, we'll make the 'tasks_db' have a 
        session scope.

      In order to do this, we'll need to use 'tmpdir_factory' instead of 'tmpdir',
        since 'tmpdir' is a function scope and 'tmpdir_factory' is a session scope.


        # conftest.py
        ------------------------------------------
        @pytest.fixture(scope='session')
        def tasks_db_session(tmpdir_factory):
            """ Connect to db before tests, disconnect after """
            temp_dir = tmpdir_factory.mktemp('temp')
            tasks.start_tasks_db(str(temp_dir), 'tiny')
            yield
            tasks.stop_tasks_db()
  
        @pytest.fixture
        def tasks_db(tasks_db_session):
            """ An empty tasks db """
            tasks.delete_all()


    - Also, we'll make the tasks fixtures session-scope, since they are static and there
        is no reason to instantiate them multiple times.

        @pytest.fixture(scope='session')
        def tasks_just_a_few(): ...

        @pytest.fixture(scope='session')
        def tasks_mult_per_owner(): ...



- Specifying Fixtures with 'usefixtures'

    - In addition to adding a fixture to the parameter list if we want to use it, we
        can also mark it with the 'usefixtures' decorator.

        @pytest.mark.usefixtures('fixture1', 'fixture2')
        def test_with_fixtures(): ...


    - Note that if you want a test to return a value from a fixture, it must be in the
        parameter list.



- Using 'autouse' for Fixtures That Always Get Used

    - If you want to avoid having to add the names of the fixtures you need to every
        test, and you want a fixture to just run all the time, you can use the
        'autouse=True' option.

        import pytest
        import time

        @pytest.fixture(autouse=True, scope='session')
        def footer_session_scope():
            """ Report the time at the end of a session. """
            yield
            now = time.time()
            print('finished : {}'.format(time.strftime('%d %b %X', time.localtime(now))))

        @pytest.fixture(autouse=True)
        def footer_function_scope():
            """ Report test durations after each function. """
            start = time.time()
            yield
            stop = time.time()
            delta = stop - start
            print('\ntest duration : {:0.3} seconds'.format(delta))

        def test_1():
            """ Simulate long-running test """
            time.sleep(1)


    - This feature can be useful, but using it is the exception rather than the rule.



- Renaming Fixtures

    - By default, the name of the fixture is the name of the function it is defined in.
        If we want to give it a different (usually shorter) name, we can use the 'name'
        parameter.

        @pytest.fixture(name='lue')
        def ultimate_answer_to_life_question():
            return 42

        def test_everything(lue):
            assert lue == 42



- Parameterizing Fixtures

    - In addition to parameterizing tests, we can also parameterize fixtures.

        # Parameterizing fixtures

        tasks_to_try = (Task('sleep', done=True),
                        Task('wake', 'brian'),
                        Task('breathe', 'BRIAN', True),
                        Task('exercise', 'BrIaN', False))

        task_ids = [Task({},{},{}).format(t.summary, t.owner, t.done) for t in tasks_to_try]

        def equivalent(t1, t2):
            return ((t1.summary == t2.summary) and
                    (t1.owner == t2.owner) and
                    (t1.done == t2.done))


        # Here, a_task will be called 4 times, each returning a task

        @pytest.fixture(params=tasks_to_try)
        def a_task(request):
            """ Using no ids """
            return request.param

        def test_add_a(tasks_db, a_task):
            """ Using a_task fixture (no ids) """
            task_id = tasks.add(a_task)
            t_from_db = tasks.get(task_id)
            assert equivalent(t_from_db, a_task)


        # Here, we also pass in the ids

        @pytest.fixture(params=tasks_to_try, ids=task_ids)
        def b_task(request):
            """ Using list of ids """
            return request.params

        def test_add_b(dasks_db, b_task):
            """ Using b_task fixture with ids """
            task_id = tasks.add(b_task)
            t_from_db = tasks.get(task_id)
            assert equivalent(t_from_db, b_task)


        # Here, we use a function to generate the identifiers

        def id_func(fixture_value):
           """A function for generating ids."""
           t = fixture_value
           return 'Task({},{},{})'.format(t.summary, t.owner, t.done)

        @pytest.fixture(params=tasks_to_try, ids=id_func)
        def c_task(request):
            """Using a function (id_func) to generate ids."""
            return request.param

        def test_add_c(tasks_db, c_task):
            """Use fixture with generated ids."""
            task_id = tasks.add(c_task)
            t_from_db = tasks.get(task_id)
            assert equivalent(t_from_db, c_task)



- Parameterizing Fixtures in the Tasks Project

    - So far, we've been using TinyDB for all of our tests.  Now, we also want to 
        make all of our tests work with MongoDB.  First, we'll need to install and
        configure MongoDB.


    - Then, we'll update our fixture to run tests with both TinyDB and MongoDB.


        # conftest.py
        --------------------------------------

        @pytest.fixture(scope='session', params=['tiny', 'mongo'])
        def tasks_db_session(tmpdir_factory, request):
            """ Connect to db before tests, disconnect after """
            temp_dir = tmpdir_factory.mktemp('temp')
            tasks.start_tasks_db(str(temp_dir), request.param)
            yield
            tasks.stop_tasks_db()

        @pytest.fixture()
        def tasks_db(tasks_db_session):
            """ An empty tasks db """
            tasks.delete_all()