-----------------------------------------------------------------------
| CHAPTER 5 - PARAMETRIZATION                                         |
-----------------------------------------------------------------------

- Parametrization

    - With parametrized testing, we pass in multiple sets of arguments to our test functions, so that
        we can cover multiple test cases with a single function.

      We'll do this 3 ways:

        1. Parametrize functions
        2. Parametrize fixtures
        3. Use a hook function called 'pytest_generate_tests'



- Testing Without Parametrization

    - Here is the code we will test:

        def finish(self, card_id: int):
            """Set a card state to 'done'."""
            self.update_card(card_id, Card(state="done"))


    - Without parametrization, we have a lot of duplicated code in our test.

        from cards import Card

        def test_finish_from_in_prog(cards_db):
            index = cards_db.add_card(Card("second edition", state="in prog"))
            cards_db.finish(index)
            card = cards_db.get_card(index)
            assert card.state == "done"

        def test_finish_from_done(cards_db):
            index = cards_db.add_card(Card("write a book", state="done"))
            cards_db.finish(index)
            card = cards_db.get_card(index)
            assert card.state == "done"
        
        def test_finish_from_todo(cards_db):
            index = cards_db.add_card(Card("create a course", state="todo"))
            cards_db.finish(index)
            card = cards_db.get_card(index)
            assert card.state == "done"


    - We could just put the separate tests cases in a list and loop through them:

        from cards import Card

        def test_finish(cards_db):
            for c in [
                Card("write a book", state="done"),
                Card("second edition", state="in prog"),
                Card("create a course", state="todo"),
            ]:
                index = cards_db.add_card(c)
                cards_db.finish(index)
                card = cards_db.get_card(index)
                assert card.state == "done"

      The drawback is that it only reports as one test, and it's harder to trace failures.



- Parametrizing Functions

    - To parameterize a test function, we just add the 'parametrize' decorator to it.

        import pytest
        from cards import Card
        
        @pytest.mark.parametrize(
            "start_summary, start_state",
            [
                ("write a book", "done"),
                ("second edition", "in prog"),
                ("create a course", "todo"),
            ],
        )
        def test_finish(cards_db, start_summary, start_state):
            initial_card = Card(summary=start_summary, state=start_state)
            index = cards_db.add_card(initial_card)
            cards_db.finish(index)
            card = cards_db.get_card(index)
            assert card.state == "done"


    - Since we don't actually need the 'start_summary', we can just pass in 'start_state' to make
        our setup a little more concise:

        @pytest.mark.parametrize("start_state", ["done", "in prog", "todo"])
        def test_finish_simple(cards_db, start_state):
            c = Card("write a book", state=start_state)
            index = cards_db.add_card(c)
            cards_db.finish(index)
            card = cards_db.get_card(index)
            assert card.state == "done"



- Parametrizing Fixtures

   - When we used function parameterization, pytest called our test function once for each set of
       arguments we provided.  

      With fixture parameterization, we shift those parameters to a fixture.  pytest will then call
        the fixture once for each set of values we provide.


    - In this case, pytest calls 'start_state' 3 times:

        @pytest.fixture(params=["done", "in prog", "todo"])
        def start_state(request):
            return request.param

        def test_finish(cards_db, start_state):
            c = Card("write a book", state=start_state)
            index = cards_db.add_card(c)
            cards_db.finish(index)
            card = cards_db.get_card(index)
            assert card.state == "done"


    - Function and fixture parametrization accomplish the same goal.  One advantage to using fixtures
        might be if you need some setup or teardown code to run on each call.

      It also allows for fixtures with multiple parameters to be reused among multiple tests.



- Parametrizing with 'pytest_generate_tests'

    - Hook functions are often used by plugins to alter the normal operation flow of pytest.  The
        'pytest_generate_tests' hook function is used to parametrize tests.

        def pytest_generate_tests(metafunc):
            if "start_state" in metafunc.fixturenames:
                metafunc.parametrize("start_state", ["done", "in prog", "todo"])

        def test_finish(cards_db, start_state):
            c = Card("write a book", state=start_state)
            index = cards_db.add_card(c)
            cards_db.finish(index)
            card = cards_db.get_card(index)
            assert card.state == "done"



- Using Keywords to Select Test Cases

    - Parametrization can create a lot of test cases quickly.  It may sometimes be useful to just run
        a subset of them.  

        # Run all tests
        $ pytest -v

        # Run only the 'todo' test cases
        $ pytest -v -k todo