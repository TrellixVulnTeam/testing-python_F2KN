-----------------------------------------------------------------------
| CHAPTER 14 - THIRD-PARTY PLUGINS                                    |
-----------------------------------------------------------------------

- Plugins That Change the Normal Test Run Flow

    pytest-order  =  Allows us to specify the order using a marker

    pytest-randomly  =  Randomizes the order, first by file, then by class, then by test

    pytest-repeat  =  Makes it easy to repeat a single test, or multiple tests, a specific number of times

    pytest-rerunfailures  =  Re-runs failed tests. Helpful for flaky tests

    pytest-xdist  =  Runs tests in parallel using multiple CPUs on one machine, or multiple remote machines



- Plugins That Alter or Enhance Output

    pytest-instafail  =  Adds an --instafail flag that reports tracebacks and output from failed tests right 
                           after the failure. Normally, pytest reports tracebacks and output from failed 
                           tests after all tests have completed.

    pytest-sugar  =  Shows green checkmarks instead of dots for passing tests and has a nice progress bar. 
                       It also shows failures instantly, like pytest-instafail.

    pytest-html  =  Allows for html report generation. Reports can be extended with extra data and images,
                       such as screenshots of failure cases.



- Plugins for Web Development

    pytest-selenium  =  Provides fixtures to allow for easy configuration of browser-based tests. Selenium 
                          is a popular tool for browser testing.

    pytest-splinter  =  Built on top of Selenium as a higher level interface, this allows Splinter to be 
                          used more easily from pytest.

    pytest-django and pytest-flask  =  Help make testing Django and Flask applications easier with pytest.



- Plugins for Fake Data

    Faker  =  Generates fake data for you. Providesfaker fixture for use with pytest

    model-bakery  =  Generates Django model objects with fake data.

    pytest-factoryboy  =  Includes fixtures for Factory Boy, a database model data generator

    pytest-mimesis  =  Generates fake data similar to Faker, but Mimesis is quite a bit faster



- Plugins That Extend pytest Functionality

    pytest-cov  =  Runs coverage while testing

    pytest-benchmark  =  Runs benchmark timing on code within tests

    pytest-timeout  =  Doesn’t let tests run too long

    pytest-asyncio  =  Tests async functions

    pytest-bdd  =  Writes behavior-driven development (BDD)–style tests with pytest

    pytest-freezegun  =  Freezes time so any code that reads the time will get same value during a test.

    pytest-mock  =  A thin-wrapper around the unittest.mock patching API



- Ch 15 = Building pytest Plugins

    - To modify how pytest works, we utilize pytest hook functions, which are entry points that allow
        plugin developers to intercept pytest behavior at certain points and make changes.

      The 3 we'll use to create our plugin are:

          # Allows plugins to perform initial config
          pytest_configure()

          # Register options and settings
          pytest_addoption()

          # Called after test collection has been performed
          pytest_collection_modifyitems()


    - The 'pytester' utility (which is part of pytest, but is disabled by default) is useful for 
        running tests on pytest itself.  It can be used to create different kinds of files and 
        folders for tests.



- Ch 16 = Advanced Parameterization

    - We can extend our parameterization by:

        - Using complex values
        - Creating custom identifiers
        - Parameterize with dynamic values
        - Using multiple parameters
        - Using indirect parameterization