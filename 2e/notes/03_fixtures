-----------------------------------------------------------------------
| CHAPTER 3 - PYTEST FIXTURES                                         |
-----------------------------------------------------------------------

- Pytest Fixtures

    - Functions that are run by pytest before (and sometimes after) the actual test functions
    - Can be used to get a data set for tests to work on
    - Can be used to get a system into a known state before tests
    - Can be used to get data ready for multiple tests


    - Simple Example

        @pytest.fixture
        def some_data():
            return 42

        def test_some_data(some_data):
            assert some_data == 42


    - When you include the fixture function in the parameter list of the test function, pytest runs
        it before running the test.



- Using Fixtures for Setup and Teardown

    - Using fixtures helps when you have a database that needs to be set up for tests to run.  Here,
        we can check that our 'count' command is working correctly:

        from pathlib import Path
        from tempfile import TemporaryDirectory
        import cards

        def test_empty():
            with TemporaryDirectory() as db_dir:
                db_path = Path(db_dir)
                db = cards.CardsDB(db_path)
                count = db.count()
                db.close()
                assert count == 0


    - Since we will want to factor the database logic out, this is greatly improved with a fixture.
        In the fixture, everything before the yield statement is 'setup' and everything after it is
        'teardown'.

        import pytest

        @pytest.fixture()
        def cards_db():
            with TemporaryDirectory() as db_dir:
                db_path = Path(db_dir)
                db = cards.CardsDB(db_path)
                yield db
                db.close()

        def test_empty(cards_db):
            assert cards_db.count() == 0


    - If we want to trace everything happening in the fixture setup, the '--setup-show' flag can be
        used.

        $ pytest --setup-show test_count.py



- Specifying Fixture Scope

    - Each fixture has a specific scope which defines when it runs.  The default scope for fixtures is
        'function' scope.  The setup portion will run before each test that needs it, and the teardown
        will run after each test.


    - If we're setting up something time consuming like a database connection or a large amount of data,
        we won't want to do it before each test.  We can set the fixture scope to 'module', and every
        test in the module will be able to share the same fixture.

        @pytest.fixture(scope="module")
        def cards_db():
            with TemporaryDirectory() as db_dir:
                db_path = Path(db_dir)
                db = cards.CardsDB(db_path)
                yield db
                db.close()


    - Here are the different scopes:

        scope='function'       # Once per test function (default)
        scope='class'          # Once per test class
        scope='module'         # Once per module
        scope='package'        # Once per package or test directory
        scope='session'        # Once per session



- Sharing Fixtures Through conftest.py

    - With a fixture defined within a test module, the 'session' and 'package' scopes act just like
        the module scope.  To make use of the scopes, we need to put them in the 'conftest.py' file.

      The conftest.py file needs to be in the directory of the file running it or a parent directory.
        It is an optional file that is considered a 'local plugin' and can contain hook functions
        and fixtures.


    - Here, we'll move our database setup into conftest.py so it only runs once per session.

        # conftest.py
        -----------------------
        from pathlib import Path
        from tempfile import TemporaryDirectory
        import cards
        import pytest

        @pytest.fixture(scope="session")
        def cards_db():
            """CardsDB object connected to a temporary database"""
            with TemporaryDirectory() as db_dir:
                db_path = Path(db_dir)
                db = cards.CardsDB(db_path)
                yield db
                db.close()

      And we can refer to 'cards_db' as normal in all of the test files.


    - Fixtures can only depend on other fixtures of their same scope or wider.


    - We can have conftest.py files at every level of our test directory.  Test can use any fixture
        in the same module, a conftest.py in the same directory, or a conftest.py in any parent
        directory.


    - We may have so many fixtures defined, we forget where to find a given fixture.  We can list
        the fixtures and their locations to help.

        # List all fixtures
        $ pytest --fixtures -v

        # List fixtures used by a given test and their locations
        $ pytest --fixtures-per-test test_count.py::test_empty
